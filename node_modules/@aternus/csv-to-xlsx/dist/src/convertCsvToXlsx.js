"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertCsvToXlsx = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const sync_1 = require("csv-parse/sync");
const xlsx_1 = __importDefault(require("xlsx"));
function convertCsvToXlsx(source, destination, { sheetName = '', overwrite = false } = {}) {
    if (typeof source !== 'string' || typeof destination !== 'string') {
        throw new Error(`"source" and "destination" arguments must be of type string.`);
    }
    if (!fs_extra_1.default.existsSync(source)) {
        throw new Error(`source "${source}" doesn't exist.`);
    }
    if (fs_extra_1.default.existsSync(destination) && !overwrite) {
        throw new Error(`destination "${destination}" already exists.`);
    }
    const csvFile = fs_extra_1.default.readFileSync(source, { encoding: 'utf-8' });
    const csvOptions = {
        columns: true,
        delimiter: ',',
        ltrim: true,
        rtrim: true,
    };
    const records = (0, sync_1.parse)(csvFile, csvOptions);
    const wb = xlsx_1.default.utils.book_new();
    const ws = xlsx_1.default.utils.json_to_sheet(records);
    xlsx_1.default.utils.book_append_sheet(wb, ws, sheetName);
    xlsx_1.default.writeFile(wb, destination);
}
exports.convertCsvToXlsx = convertCsvToXlsx;
