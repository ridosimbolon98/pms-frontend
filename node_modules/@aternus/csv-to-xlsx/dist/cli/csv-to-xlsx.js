#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const commander_1 = require("commander");
const convertCsvToXlsx_1 = require("../src/convertCsvToXlsx");
const package_json_1 = __importDefault(require("../package.json"));
commander_1.program
    .version(package_json_1.default.version, '-v, --version')
    .option('-i, --input-dir [dir]', 'Input directory that has the CSV files', 'csv')
    .option('-o, --output-dir [dir]', 'Output directory for the XLSX files', 'xlsx')
    .option('-s, --sheet-name [name]', 'Set the sheet name to be used in the XLSX files', '')
    .option('-f, --force', 'forcefully overwrite XLSX files at the output directory', false);
commander_1.program.on('--help', function () {
    console.log(``);
    console.log(`Created by: ${package_json_1.default.author.name}`);
    console.log(`Please report bugs at: ${package_json_1.default.bugs.url}`);
    console.log(`Version: ${package_json_1.default.version}`);
});
commander_1.program.parse(process.argv);
const programOptions = commander_1.program.opts();
const csvPath = path_1.default.join(process.cwd(), programOptions.inputDir);
const xlsxPath = path_1.default.join(process.cwd(), programOptions.outputDir);
if (!fs_extra_1.default.existsSync(csvPath)) {
    console.error(`Invalid input directory: ${csvPath}\n`);
    process.exitCode = 1;
    commander_1.program.help();
}
if (!fs_extra_1.default.existsSync(xlsxPath)) {
    console.info(`Creating output directory: ${xlsxPath}`);
    fs_extra_1.default.mkdirSync(xlsxPath, { recursive: true });
}
const csvFiles = fs_extra_1.default.readdirSync(csvPath);
for (const file of csvFiles) {
    const fileObject = path_1.default.parse(file);
    if (fileObject.ext !== '.csv') {
        continue;
    }
    console.info(`Converting: ${file}`);
    try {
        const source = path_1.default.join(csvPath, file);
        const destination = path_1.default.join(xlsxPath, `${fileObject.name}.xlsx`);
        (0, convertCsvToXlsx_1.convertCsvToXlsx)(source, destination, {
            sheetName: programOptions.sheetName,
            overwrite: Boolean(programOptions.force),
        });
    }
    catch (e) {
        console.error(e.toString());
    }
}
console.info(`Complete.`);
