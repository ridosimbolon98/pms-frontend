{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertCsvToXlsx = void 0;\n\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nconst sync_1 = require(\"csv-parse/sync\");\n\nconst xlsx_1 = __importDefault(require(\"xlsx\"));\n\nfunction convertCsvToXlsx(source, destination) {\n  let {\n    sheetName = '',\n    overwrite = false\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (typeof source !== 'string' || typeof destination !== 'string') {\n    throw new Error(`\"source\" and \"destination\" arguments must be of type string.`);\n  }\n\n  if (!fs_extra_1.default.existsSync(source)) {\n    throw new Error(`source \"${source}\" doesn't exist.`);\n  }\n\n  if (fs_extra_1.default.existsSync(destination) && !overwrite) {\n    throw new Error(`destination \"${destination}\" already exists.`);\n  }\n\n  const csvFile = fs_extra_1.default.readFileSync(source, {\n    encoding: 'utf-8'\n  });\n  const csvOptions = {\n    columns: true,\n    delimiter: ',',\n    ltrim: true,\n    rtrim: true\n  };\n  const records = (0, sync_1.parse)(csvFile, csvOptions);\n  const wb = xlsx_1.default.utils.book_new();\n  const ws = xlsx_1.default.utils.json_to_sheet(records);\n  xlsx_1.default.utils.book_append_sheet(wb, ws, sheetName);\n  xlsx_1.default.writeFile(wb, destination);\n}\n\nexports.convertCsvToXlsx = convertCsvToXlsx;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","convertCsvToXlsx","fs_extra_1","require","sync_1","xlsx_1","source","destination","sheetName","overwrite","Error","default","existsSync","csvFile","readFileSync","encoding","csvOptions","columns","delimiter","ltrim","rtrim","records","parse","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","writeFile"],"sources":["C:/Users/IT09/Music/pms/frontend/node_modules/@aternus/csv-to-xlsx/dist/src/convertCsvToXlsx.js"],"sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertCsvToXlsx = void 0;\r\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\r\nconst sync_1 = require(\"csv-parse/sync\");\r\nconst xlsx_1 = __importDefault(require(\"xlsx\"));\r\nfunction convertCsvToXlsx(source, destination, { sheetName = '', overwrite = false } = {}) {\r\n    if (typeof source !== 'string' || typeof destination !== 'string') {\r\n        throw new Error(`\"source\" and \"destination\" arguments must be of type string.`);\r\n    }\r\n    if (!fs_extra_1.default.existsSync(source)) {\r\n        throw new Error(`source \"${source}\" doesn't exist.`);\r\n    }\r\n    if (fs_extra_1.default.existsSync(destination) && !overwrite) {\r\n        throw new Error(`destination \"${destination}\" already exists.`);\r\n    }\r\n    const csvFile = fs_extra_1.default.readFileSync(source, { encoding: 'utf-8' });\r\n    const csvOptions = {\r\n        columns: true,\r\n        delimiter: ',',\r\n        ltrim: true,\r\n        rtrim: true,\r\n    };\r\n    const records = (0, sync_1.parse)(csvFile, csvOptions);\r\n    const wb = xlsx_1.default.utils.book_new();\r\n    const ws = xlsx_1.default.utils.json_to_sheet(records);\r\n    xlsx_1.default.utils.book_append_sheet(wb, ws, sheetName);\r\n    xlsx_1.default.writeFile(wb, destination);\r\n}\r\nexports.convertCsvToXlsx = convertCsvToXlsx;\r\n"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMC,UAAU,GAAGR,eAAe,CAACS,OAAO,CAAC,UAAD,CAAR,CAAlC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAAtB;;AACA,MAAME,MAAM,GAAGX,eAAe,CAACS,OAAO,CAAC,MAAD,CAAR,CAA9B;;AACA,SAASF,gBAAT,CAA0BK,MAA1B,EAAkCC,WAAlC,EAA2F;EAAA,IAA5C;IAAEC,SAAS,GAAG,EAAd;IAAkBC,SAAS,GAAG;EAA9B,CAA4C,uEAAJ,EAAI;;EACvF,IAAI,OAAOH,MAAP,KAAkB,QAAlB,IAA8B,OAAOC,WAAP,KAAuB,QAAzD,EAAmE;IAC/D,MAAM,IAAIG,KAAJ,CAAW,8DAAX,CAAN;EACH;;EACD,IAAI,CAACR,UAAU,CAACS,OAAX,CAAmBC,UAAnB,CAA8BN,MAA9B,CAAL,EAA4C;IACxC,MAAM,IAAII,KAAJ,CAAW,WAAUJ,MAAO,kBAA5B,CAAN;EACH;;EACD,IAAIJ,UAAU,CAACS,OAAX,CAAmBC,UAAnB,CAA8BL,WAA9B,KAA8C,CAACE,SAAnD,EAA8D;IAC1D,MAAM,IAAIC,KAAJ,CAAW,gBAAeH,WAAY,mBAAtC,CAAN;EACH;;EACD,MAAMM,OAAO,GAAGX,UAAU,CAACS,OAAX,CAAmBG,YAAnB,CAAgCR,MAAhC,EAAwC;IAAES,QAAQ,EAAE;EAAZ,CAAxC,CAAhB;EACA,MAAMC,UAAU,GAAG;IACfC,OAAO,EAAE,IADM;IAEfC,SAAS,EAAE,GAFI;IAGfC,KAAK,EAAE,IAHQ;IAIfC,KAAK,EAAE;EAJQ,CAAnB;EAMA,MAAMC,OAAO,GAAG,CAAC,GAAGjB,MAAM,CAACkB,KAAX,EAAkBT,OAAlB,EAA2BG,UAA3B,CAAhB;EACA,MAAMO,EAAE,GAAGlB,MAAM,CAACM,OAAP,CAAea,KAAf,CAAqBC,QAArB,EAAX;EACA,MAAMC,EAAE,GAAGrB,MAAM,CAACM,OAAP,CAAea,KAAf,CAAqBG,aAArB,CAAmCN,OAAnC,CAAX;EACAhB,MAAM,CAACM,OAAP,CAAea,KAAf,CAAqBI,iBAArB,CAAuCL,EAAvC,EAA2CG,EAA3C,EAA+ClB,SAA/C;EACAH,MAAM,CAACM,OAAP,CAAekB,SAAf,CAAyBN,EAAzB,EAA6BhB,WAA7B;AACH;;AACDR,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B"},"metadata":{},"sourceType":"script"}